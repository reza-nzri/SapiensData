// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SapiensDataAPI.Data.DbContextCs;


#nullable disable

namespace SapiensDataAPI.Migrations
{
	[DbContext(typeof(SapeinsDataDbContext))]
    [Migration("20241106090958_user weg")]
    partial class Userweg
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("house_number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("street");

                    b.HasKey("AddressId")
                        .HasName("PK__Address__CAA247C81434C0EC");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ApplicationUserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AppLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Github")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snapchat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiktok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("api_endpoint");

                    b.Property<string>("ApiVersion")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("v1")
                        .HasColumnName("api_version");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bank_name");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BankId")
                        .HasName("PK__Bank__4076F70387093681");

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.BankAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<decimal?>("AccountBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("account_balance");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_type");

                    b.Property<string>("ApiAccessToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("api_access_token");

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("EUR")
                        .HasColumnName("currency");

                    b.Property<string>("Iban")
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)")
                        .HasColumnName("iban");

                    b.Property<DateTime?>("LastSyncedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_synced_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("AccountId")
                        .HasName("PK__BankAcco__46A222CD37890FB4");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ApiAccessToken" }, "UQ__BankAcco__28187BEB28D4E40D")
                        .IsUnique()
                        .HasFilter("[api_access_token] IS NOT NULL");

                    b.HasIndex(new[] { "AccountNumber" }, "UQ__BankAcco__AF91A6AD635085E3")
                        .IsUnique()
                        .HasFilter("[account_number] IS NOT NULL");

                    b.ToTable("BankAccount", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.BankTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<decimal?>("BalanceAfter")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("balance_after");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransactionId")
                        .HasName("PK__BankTran__85C600AF22A200E2");

                    b.HasIndex("AccountId");

                    b.ToTable("BankTransaction", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category_name");

                    b.Property<string>("CategoryType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parent_category_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__D54EE9B481C94F07");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("FoundedDate")
                        .HasColumnType("date")
                        .HasColumnName("founded_date");

                    b.Property<string>("Industry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("industry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("registration_number");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tax_id");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("website");

                    b.HasKey("CompanyId")
                        .HasName("PK__Company__3E267235E7687D3B");

                    b.HasIndex(new[] { "RegistrationNumber" }, "UQ__Company__125DB2A3DA5EC4D6")
                        .IsUnique()
                        .HasFilter("[registration_number] IS NOT NULL");

                    b.HasIndex(new[] { "TaxId" }, "UQ__Company__129B8671141E5918")
                        .IsUnique()
                        .HasFilter("[tax_id] IS NOT NULL");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.CompanyAddress", b =>
                {
                    b.Property<int>("CompanyAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("company_address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyAddressId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address_type");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CompanyAddressId")
                        .HasName("PK__CompanyA__5650FC57CC4984E6");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "AddressType" }, "UQ__CompanyA__071A9587B0D05465")
                        .IsUnique();

                    b.ToTable("CompanyAddress", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Debt", b =>
                {
                    b.Property<int>("DebtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("debt_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DebtId"));

                    b.Property<decimal>("AmountOwed")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount_owed");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreditorCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("creditor_company_id");

                    b.Property<string>("CreditorCompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("creditor_company_name");

                    b.Property<string>("CreditorFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("creditor_first_name");

                    b.Property<string>("CreditorLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("creditor_last_name");

                    b.Property<string>("CreditorUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("creditor_user_id");

                    b.Property<string>("DebtType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("debt_type");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("Frequency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("frequency");

                    b.Property<decimal?>("InterestRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("interest_rate");

                    b.Property<DateTime?>("NextReminder")
                        .HasColumnType("datetime")
                        .HasColumnName("next_reminder");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("open")
                        .HasColumnName("status");

                    b.Property<int?>("TimesRemaining")
                        .HasColumnType("int")
                        .HasColumnName("times_remaining");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("DebtId")
                        .HasName("PK__Debt__A7DCE7F913425E57");

                    b.HasIndex("CreditorCompanyId");

                    b.HasIndex("CreditorUserId");

                    b.ToTable("Debt", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("EUR")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("ExpenseCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("expense_category_id");

                    b.Property<DateOnly>("ExpenseDate")
                        .HasColumnType("date")
                        .HasColumnName("expense_date");

                    b.Property<int>("FrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("frequency_id");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("completed")
                        .HasColumnName("payment_status");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnName("receipt_id");

                    b.Property<int?>("SourceCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("source_company_id");

                    b.Property<string>("SourceCompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("source_company_name");

                    b.Property<string>("SourceFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("source_first_name");

                    b.Property<string>("SourceLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("source_last_name");

                    b.Property<string>("SourceType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("source_type");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("source_user_id");

                    b.Property<int?>("TaxRateId")
                        .HasColumnType("int")
                        .HasColumnName("tax_rate_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("ExpenseId")
                        .HasName("PK__Expense__404B6A6B714931B5");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("SourceCompanyId");

                    b.HasIndex("SourceUserId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("UserId");

                    b.ToTable("Expense", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ExpenseCategory", b =>
                {
                    b.Property<int>("ExpenseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("expense_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseCategoryId"));

                    b.Property<decimal?>("Budget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("budget");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category_name");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parent_category_id");

                    b.HasKey("ExpenseCategoryId")
                        .HasName("PK__ExpenseC__01F417D73F5C647A");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "UQ__ExpenseC__5189E255EEF6BF80")
                        .IsUnique();

                    b.ToTable("ExpenseCategory", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Frequency", b =>
                {
                    b.Property<int>("FrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("frequency_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrequencyId"));

                    b.Property<int?>("DaysInterval")
                        .HasColumnType("int")
                        .HasColumnName("days_interval");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("FrequencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("frequency_name");

                    b.HasKey("FrequencyId")
                        .HasName("PK__Frequenc__F32AB2AB880FB888");

                    b.HasIndex(new[] { "FrequencyName" }, "UQ__Frequenc__A9909F222F5DF4F4")
                        .IsUnique();

                    b.ToTable("Frequency", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Income", b =>
                {
                    b.Property<int>("IncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("income_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomeId"));

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("EUR")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("FrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("frequency_id");

                    b.Property<decimal?>("GrossAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("gross_amount");

                    b.Property<int?>("IncomeCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("income_category_id");

                    b.Property<DateOnly>("IncomeDate")
                        .HasColumnType("date")
                        .HasColumnName("income_date");

                    b.Property<bool?>("IsRecurring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_recurring");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("NetAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("net_amount");

                    b.Property<string>("PayerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("payer_name");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<DateTime?>("ReceivedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("received_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("SourceCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("source_company_id");

                    b.Property<string>("SourceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("source_name");

                    b.Property<string>("SourceType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("source_type");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("source_user_id");

                    b.Property<decimal?>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("tax_amount");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("IncomeId")
                        .HasName("PK__Income__8DC777A62C4377E8");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("IncomeCategoryId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SourceCompanyId");

                    b.HasIndex("SourceUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Income", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.IncomeCategory", b =>
                {
                    b.Property<int>("IncomeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("income_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomeCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category_name");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parent_category_id");

                    b.HasKey("IncomeCategoryId")
                        .HasName("PK__IncomeCa__95C31FD04B6F8760");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "UQ__IncomeCa__5189E2550F873F42")
                        .IsUnique();

                    b.ToTable("IncomeCategory", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Investment", b =>
                {
                    b.Property<int>("InvestmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("investment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestmentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("interest_rate");

                    b.Property<DateOnly>("InvestmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("investment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InvestmentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("investment_type");

                    b.Property<int?>("LoanedToCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("loaned_to_company_id");

                    b.Property<string>("LoanedToFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("loaned_to_first_name");

                    b.Property<string>("LoanedToLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("loaned_to_last_name");

                    b.Property<string>("LoanedToUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("loaned_to_user_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("InvestmentId")
                        .HasName("PK__Investme__2093C283C4A88188");

                    b.HasIndex("LoanedToCompanyId");

                    b.HasIndex("LoanedToUserId");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Label", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("label_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelId"));

                    b.Property<string>("ColorCode")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("color_code");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("label_name");

                    b.HasKey("LabelId")
                        .HasName("PK__Label__E44FFA5872065241");

                    b.HasIndex(new[] { "LabelName" }, "UQ__Label__A74BEA651F478188")
                        .IsUnique();

                    b.ToTable("Label", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.LabelAssignment", b =>
                {
                    b.Property<int>("LabelAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("label_assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelAssignmentId"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("entity_type");

                    b.Property<int>("LabelId")
                        .HasColumnType("int")
                        .HasColumnName("label_id");

                    b.HasKey("LabelAssignmentId")
                        .HasName("PK__LabelAss__F27DEC24E3563F24");

                    b.HasIndex("LabelId");

                    b.ToTable("LabelAssignment", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PaymentM__8A3EA9EB9B8919FC");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("brand");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<decimal?>("InlineTotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("inline_total_price");

                    b.Property<decimal?>("InlineTotalVolume")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("inline_total_volume");

                    b.Property<decimal?>("InlineTotalWeight")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("inline_total_weight");

                    b.Property<int?>("IppUnit")
                        .HasColumnType("int")
                        .HasColumnName("ipp_unit");

                    b.Property<bool?>("IsBio")
                        .HasColumnType("bit")
                        .HasColumnName("is_bio");

                    b.Property<int?>("ItemsPerPackage")
                        .HasColumnType("int")
                        .HasColumnName("items_per_package");

                    b.Property<string>("OriginCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("origin_country");

                    b.Property<int?>("QUnit")
                        .HasColumnType("int")
                        .HasColumnName("q_unit");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("ShortName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("short_name");

                    b.Property<string>("StoreDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("store_description");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("tax_code")
                        .IsFixedLength();

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.Property<int?>("UpUnit")
                        .HasColumnType("int")
                        .HasColumnName("up_unit");

                    b.Property<string>("UserDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("user_description");

                    b.Property<int?>("VUnit")
                        .HasColumnType("int")
                        .HasColumnName("v_unit");

                    b.Property<decimal?>("VatRate")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("vat_rate");

                    b.Property<decimal?>("VolumePerUnit")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("volume_per_unit");

                    b.Property<int?>("WUnit")
                        .HasColumnType("int")
                        .HasColumnName("w_unit");

                    b.Property<decimal?>("WeightPerUnit")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("weight_per_unit");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__47027DF51756F8BB");

                    b.HasIndex("IppUnit");

                    b.HasIndex("QUnit");

                    b.HasIndex("UpUnit");

                    b.HasIndex("VUnit");

                    b.HasIndex("WUnit");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Receipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("receipt_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"));

                    b.Property<DateTime?>("BuyDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("buy_datetime");

                    b.Property<decimal?>("CashbackAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("cashback_amount");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("currency");

                    b.Property<string>("FullNamePaymentMethod")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name_payment_method");

                    b.Property<string>("Iban")
                        .HasMaxLength(34)
                        .IsUnicode(false)
                        .HasColumnType("char(34)")
                        .HasColumnName("iban")
                        .IsFixedLength();

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("ReceiptImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("receipt_image_path");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("TotalLoyalty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_loyalty");

                    b.Property<string>("TraceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("trace_number");

                    b.HasKey("ReceiptId")
                        .HasName("PK__Receipt__91F52C1FA2C53D87");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("StoreId");

                    b.ToTable("Receipt", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ReceiptPayment", b =>
                {
                    b.Property<int>("ReceiptPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("receipt_payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptPaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnName("receipt_id");

                    b.HasKey("ReceiptPaymentId")
                        .HasName("PK__ReceiptP__CE878B50AB921B4A");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptPayment", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ReceiptTaxDetail", b =>
                {
                    b.Property<int>("ReceiptTaxDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("receipt_tax_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptTaxDetailId"));

                    b.Property<decimal?>("NetSalesAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("net_sales_amount");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnName("receipt_id");

                    b.Property<int>("TaxRateId")
                        .HasColumnType("int")
                        .HasColumnName("tax_rate_id");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("vat_amount");

                    b.HasKey("ReceiptTaxDetailId")
                        .HasName("PK__ReceiptT__190DF74F5F3FD40C");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("ReceiptTaxDetail", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Saving", b =>
                {
                    b.Property<int>("SavingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("savings_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SavingsId"));

                    b.Property<decimal?>("AccumulatedInterest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("accumulated_interest");

                    b.Property<decimal?>("ContributionAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("contribution_amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("frequency_id");

                    b.Property<decimal?>("InterestRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("interest_rate");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("notes");

                    b.Property<decimal?>("SavedAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("saved_amount");

                    b.Property<string>("SavingsGoal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("savings_goal");

                    b.Property<DateOnly>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("in-progress")
                        .HasColumnName("status");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("target_amount");

                    b.Property<DateOnly?>("TargetDate")
                        .HasColumnType("date")
                        .HasColumnName("target_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("SavingsId")
                        .HasName("PK__Savings__AC1BA043D0E18128");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Savings");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("BrandName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("brand_name");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("TaxId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tax_id");

                    b.HasKey("StoreId")
                        .HasName("PK__Store__A2F2A30C9852CCAC");

                    b.HasIndex("AddressId");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.StoreAddress", b =>
                {
                    b.Property<int>("CompanyAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("company_address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyAddressId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CompanyAddressId")
                        .HasName("PK__StoreAdd__5650FC573D98C8C0");

                    b.HasIndex("AddressId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "AddressType" }, "UQ__StoreAdd__071A9587EC1B4587")
                        .IsUnique();

                    b.ToTable("StoreAddress", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.TaxRate", b =>
                {
                    b.Property<int>("TaxRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tax_rate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxRateId"));

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("net_amount");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnName("receipt_id");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("tax_code")
                        .IsFixedLength();

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("vat_rate");

                    b.HasKey("TaxRateId")
                        .HasName("PK__TaxRate__4B78B3339E326A41");

                    b.HasIndex("ReceiptId");

                    b.ToTable("TaxRate", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.UnitType", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("UnitName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit_name");

                    b.Property<string>("UnitType1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit_type");

                    b.HasKey("UnitId")
                        .HasName("PK__UnitType__D3AF5BD72F731E9A");

                    b.ToTable("UnitType", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.UserAddress", b =>
                {
                    b.Property<int>("CompanyAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("company_address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyAddressId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("CompanyAddressId")
                        .HasName("PK__UserAddr__5650FC5748220D98");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AddressType" }, "UQ__UserAddr__071A95874A01A788")
                        .IsUnique();

                    b.ToTable("UserAddress", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.UserRelationship", b =>
                {
                    b.Property<int>("RelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("relationship_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationshipId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RelatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("related_user_id");

                    b.Property<string>("RelationshipType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("relationship_type");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("RelationshipId")
                        .HasName("PK__UserRela__C0CFD554024C1505");

                    b.HasIndex("RelatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRelationship", (string)null);
                });

            modelBuilder.Entity("SapiensDataAPI.Models.UserSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("session_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<string>("Browser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("browser");

                    b.Property<string>("Device")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("device");

                    b.Property<int?>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location");

                    b.Property<int?>("LoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("login_attempts");

                    b.Property<DateTime?>("LoginTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("login_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime")
                        .HasColumnName("logout_time");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("operating_system");

                    b.Property<int?>("SessionDuration")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasColumnName("session_duration")
                        .HasComputedColumnSql("(datediff(minute,[login_time],[logout_time]))", false);

                    b.Property<string>("SessionToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("session_token");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId")
                        .HasName("PK__UserSess__69B13FDCEE3067BE");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SessionToken" }, "UQ__UserSess__E598F5C8FA9398C8")
                        .IsUnique()
                        .HasFilter("[session_token] IS NOT NULL");

                    b.ToTable("UserSession", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SapiensDataAPI.Models.BankAccount", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BankAccou__bank___662B2B3B");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BankAccou__user___65370702");

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.BankTransaction", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.BankAccount", "Account")
                        .WithMany("BankTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BankTrans__accou__6BE40491");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Category", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK__Category__parent__4316F928");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.CompanyAddress", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Address", "Address")
                        .WithMany("CompanyAddresses")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__CompanyAd__addre__73BA3083");

                    b.HasOne("SapiensDataAPI.Models.Company", "Company")
                        .WithMany("CompanyAddresses")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__CompanyAd__compa__72C60C4A");

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Debt", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Company", "CreditorCompany")
                        .WithMany("Debts")
                        .HasForeignKey("CreditorCompanyId")
                        .HasConstraintName("FK__Debt__creditor_c__4F47C5E3");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "CreditorUser")
                        .WithMany("Debts")
                        .HasForeignKey("CreditorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Debt__creditor_u__4E53A1AA");

                    b.Navigation("CreditorCompany");

                    b.Navigation("CreditorUser");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Expense", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .HasConstraintName("FK__Expense__expense__3587F3E0");

                    b.HasOne("SapiensDataAPI.Models.Frequency", "Frequency")
                        .WithMany("Expenses")
                        .HasForeignKey("FrequencyId")
                        .IsRequired()
                        .HasConstraintName("FK__Expense__frequen__395884C4");

                    b.HasOne("SapiensDataAPI.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Expenses")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__Expense__payment__367C1819");

                    b.HasOne("SapiensDataAPI.Models.Receipt", "Receipt")
                        .WithMany("Expenses")
                        .HasForeignKey("ReceiptId")
                        .HasConstraintName("FK__Expense__receipt__37703C52");

                    b.HasOne("SapiensDataAPI.Models.Company", "SourceCompany")
                        .WithMany("Expenses")
                        .HasForeignKey("SourceCompanyId")
                        .HasConstraintName("FK__Expense__source___3493CFA7");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "SourceUser")
                        .WithMany("ExpenseSourceUsers")
                        .HasForeignKey("SourceUserId")
                        .HasConstraintName("FK__Expense__source___339FAB6E");

                    b.HasOne("SapiensDataAPI.Models.TaxRate", "TaxRate")
                        .WithMany("Expenses")
                        .HasForeignKey("TaxRateId")
                        .HasConstraintName("FK__Expense__tax_rat__3864608B");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "User")
                        .WithMany("ExpenseUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Expense__user_id__32AB8735");

                    b.Navigation("ExpenseCategory");

                    b.Navigation("Frequency");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Receipt");

                    b.Navigation("SourceCompany");

                    b.Navigation("SourceUser");

                    b.Navigation("TaxRate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ExpenseCategory", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.ExpenseCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK__ExpenseCa__paren__2A164134");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Income", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Frequency", "Frequency")
                        .WithMany("Incomes")
                        .HasForeignKey("FrequencyId")
                        .IsRequired()
                        .HasConstraintName("FK__Income__frequenc__25518C17");

                    b.HasOne("SapiensDataAPI.Models.IncomeCategory", "IncomeCategory")
                        .WithMany("Incomes")
                        .HasForeignKey("IncomeCategoryId")
                        .HasConstraintName("FK__Income__income_c__2180FB33");

                    b.HasOne("SapiensDataAPI.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Incomes")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__Income__payment___245D67DE");

                    b.HasOne("SapiensDataAPI.Models.Company", "SourceCompany")
                        .WithMany("Incomes")
                        .HasForeignKey("SourceCompanyId")
                        .HasConstraintName("FK__Income__source_c__236943A5");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "SourceUser")
                        .WithMany("IncomeSourceUsers")
                        .HasForeignKey("SourceUserId")
                        .HasConstraintName("FK__Income__source_u__22751F6C");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "User")
                        .WithMany("IncomeUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Income__user_id__208CD6FA");

                    b.Navigation("Frequency");

                    b.Navigation("IncomeCategory");

                    b.Navigation("PaymentMethod");

                    b.Navigation("SourceCompany");

                    b.Navigation("SourceUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.IncomeCategory", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.IncomeCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK__IncomeCat__paren__17F790F9");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Investment", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Company", "LoanedToCompany")
                        .WithMany("Investments")
                        .HasForeignKey("LoanedToCompanyId")
                        .HasConstraintName("FK__Investmen__loane__56E8E7AB");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "LoanedToUser")
                        .WithMany("Investments")
                        .HasForeignKey("LoanedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Investmen__loane__55F4C372");

                    b.Navigation("LoanedToCompany");

                    b.Navigation("LoanedToUser");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.LabelAssignment", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Label", "Label")
                        .WithMany("LabelAssignments")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LabelAssi__label__49C3F6B7");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Product", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.UnitType", "IppUnitNavigation")
                        .WithMany("ProductIppUnitNavigations")
                        .HasForeignKey("IppUnit")
                        .HasConstraintName("FK__Product__ipp_uni__02084FDA");

                    b.HasOne("SapiensDataAPI.Models.UnitType", "QUnitNavigation")
                        .WithMany("ProductQUnitNavigations")
                        .HasForeignKey("QUnit")
                        .HasConstraintName("FK__Product__q_unit__01142BA1");

                    b.HasOne("SapiensDataAPI.Models.UnitType", "UpUnitNavigation")
                        .WithMany("ProductUpUnitNavigations")
                        .HasForeignKey("UpUnit")
                        .HasConstraintName("FK__Product__up_unit__04E4BC85");

                    b.HasOne("SapiensDataAPI.Models.UnitType", "VUnitNavigation")
                        .WithMany("ProductVUnitNavigations")
                        .HasForeignKey("VUnit")
                        .HasConstraintName("FK__Product__v_unit__03F0984C");

                    b.HasOne("SapiensDataAPI.Models.UnitType", "WUnitNavigation")
                        .WithMany("ProductWUnitNavigations")
                        .HasForeignKey("WUnit")
                        .HasConstraintName("FK__Product__w_unit__02FC7413");

                    b.Navigation("IppUnitNavigation");

                    b.Navigation("QUnitNavigation");

                    b.Navigation("UpUnitNavigation");

                    b.Navigation("VUnitNavigation");

                    b.Navigation("WUnitNavigation");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Receipt", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Receipts")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__Receipt__payment__08B54D69");

                    b.HasOne("SapiensDataAPI.Models.Store", "Store")
                        .WithMany("Receipts")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__Receipt__store_i__09A971A2");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ReceiptPayment", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("ReceiptPayments")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__ReceiptPa__payme__14270015");

                    b.HasOne("SapiensDataAPI.Models.Receipt", "Receipt")
                        .WithMany("ReceiptPayments")
                        .HasForeignKey("ReceiptId")
                        .HasConstraintName("FK__ReceiptPa__recei__1332DBDC");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ReceiptTaxDetail", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Receipt", "Receipt")
                        .WithMany("ReceiptTaxDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReceiptTa__recei__0F624AF8");

                    b.HasOne("SapiensDataAPI.Models.TaxRate", "TaxRate")
                        .WithMany("ReceiptTaxDetails")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReceiptTa__tax_r__10566F31");

                    b.Navigation("Receipt");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Saving", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Frequency", "Frequency")
                        .WithMany("Savings")
                        .HasForeignKey("FrequencyId")
                        .HasConstraintName("FK__Savings__frequen__44CA3770");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "User")
                        .WithMany("Savings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Savings__user_id__43D61337");

                    b.Navigation("Frequency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Store", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Address", "Address")
                        .WithMany("Stores")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__Store__address_i__76969D2E");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.StoreAddress", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Address", "Address")
                        .WithMany("StoreAddresses")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__StoreAddr__addre__7E37BEF6");

                    b.HasOne("SapiensDataAPI.Models.Store", "Store")
                        .WithMany("StoreAddresses")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__StoreAddr__store__7D439ABD");

                    b.Navigation("Address");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.TaxRate", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Receipt", "Receipt")
                        .WithMany("TaxRates")
                        .HasForeignKey("ReceiptId")
                        .HasConstraintName("FK__TaxRate__receipt__0C85DE4D");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.UserAddress", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__UserAddre__addre__5AEE82B9");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserAddre__user___59FA5E80");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.UserRelationship", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "RelatedUser")
                        .WithMany("UserRelationshipRelatedUsers")
                        .HasForeignKey("RelatedUserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRelat__relat__60A75C0F");

                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "User")
                        .WithMany("UserRelationshipUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRelat__user___5FB337D6");

                    b.Navigation("RelatedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.UserSession", b =>
                {
                    b.HasOne("SapiensDataAPI.Models.ApplicationUserModel", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserSessi__user___68487DD7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Address", b =>
                {
                    b.Navigation("CompanyAddresses");

                    b.Navigation("StoreAddresses");

                    b.Navigation("Stores");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ApplicationUserModel", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Debts");

                    b.Navigation("ExpenseSourceUsers");

                    b.Navigation("ExpenseUsers");

                    b.Navigation("IncomeSourceUsers");

                    b.Navigation("IncomeUsers");

                    b.Navigation("Investments");

                    b.Navigation("Savings");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserRelationshipRelatedUsers");

                    b.Navigation("UserRelationshipUsers");

                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.BankAccount", b =>
                {
                    b.Navigation("BankTransactions");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Category", b =>
                {
                    b.Navigation("InverseParentCategory");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Company", b =>
                {
                    b.Navigation("CompanyAddresses");

                    b.Navigation("Debts");

                    b.Navigation("Expenses");

                    b.Navigation("Incomes");

                    b.Navigation("Investments");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("InverseParentCategory");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Frequency", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Incomes");

                    b.Navigation("Savings");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.IncomeCategory", b =>
                {
                    b.Navigation("Incomes");

                    b.Navigation("InverseParentCategory");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Label", b =>
                {
                    b.Navigation("LabelAssignments");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.PaymentMethod", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Incomes");

                    b.Navigation("ReceiptPayments");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Receipt", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("ReceiptPayments");

                    b.Navigation("ReceiptTaxDetails");

                    b.Navigation("TaxRates");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.Store", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("StoreAddresses");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.TaxRate", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("ReceiptTaxDetails");
                });

            modelBuilder.Entity("SapiensDataAPI.Models.UnitType", b =>
                {
                    b.Navigation("ProductIppUnitNavigations");

                    b.Navigation("ProductQUnitNavigations");

                    b.Navigation("ProductUpUnitNavigations");

                    b.Navigation("ProductVUnitNavigations");

                    b.Navigation("ProductWUnitNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
